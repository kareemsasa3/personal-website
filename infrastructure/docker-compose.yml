services:
  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: portfolio-nginx
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - workfolio
      - ai-backend
      - arachne
    restart: unless-stopped
    networks:
      - portfolio-network

  # Workfolio - Main portfolio application
  workfolio:
    build:
      context: ../workfolio
      dockerfile: Dockerfile
    container_name: portfolio-workfolio
    environment:
      - NODE_ENV=${WORKFOLIO_NODE_ENV:-production}
      - VITE_AI_BACKEND_URL=${VITE_AI_BACKEND_URL:-/api/ai}
    restart: unless-stopped
    networks:
      - portfolio-network

  # AI Backend - AI microservice
  ai-backend:
    build:
      context: ../services/ai-backend
      dockerfile: Dockerfile
    container_name: portfolio-ai-backend
    environment:
      - NODE_ENV=${AI_BACKEND_NODE_ENV:-production}
      - PORT=${AI_BACKEND_PORT:-3001}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - LOG_LEVEL=${AI_BACKEND_LOG_LEVEL:-info}
      - ENABLE_METRICS=${AI_BACKEND_ENABLE_METRICS:-true}
      - RATE_LIMIT_WINDOW_MS=${AI_BACKEND_RATE_LIMIT_WINDOW_MS:-900000}
      - RATE_LIMIT_MAX_REQUESTS=${AI_BACKEND_RATE_LIMIT_MAX_REQUESTS:-100}
      - SESSION_TOKEN_SECRET=${SESSION_TOKEN_SECRET:-change-me}
      - REDIS_URL=${AI_BACKEND_REDIS_URL:-redis://redis:6379/0}
      - TURNSTILE_SECRET=${TURNSTILE_SECRET:-}
      - ARACHNE_URL=${ARACHNE_URL:-http://arachne:8080}
      - ARACHNE_API_TOKEN=${ARACHNE_API_TOKEN:-}
      - PROFILE_CONTEXT_PATH=/app/profile/profile.md
    restart: unless-stopped
    networks:
      - portfolio-network

  # Arachne - Web scraping service
  arachne:
    build:
      context: ../services/arachne
      dockerfile: Dockerfile
    container_name: portfolio-arachne
    environment:
      - SCRAPER_REDIS_ADDR=${ARACHNE_REDIS_ADDR:-redis:6379}
      - SCRAPER_REDIS_DB=${ARACHNE_REDIS_DB:-0}
      - SCRAPER_ENABLE_METRICS=${ARACHNE_ENABLE_METRICS:-true}
      - SCRAPER_ENABLE_LOGGING=${ARACHNE_ENABLE_LOGGING:-true}
      - SCRAPER_LOG_LEVEL=${ARACHNE_LOG_LEVEL:-info}
      - SCRAPER_MAX_CONCURRENT=${ARACHNE_MAX_CONCURRENT:-5}
      - SCRAPER_REQUEST_TIMEOUT=${ARACHNE_REQUEST_TIMEOUT:-120s}
      - SCRAPER_TOTAL_TIMEOUT=${ARACHNE_TOTAL_TIMEOUT:-180s}
      - SCRAPER_USE_HEADLESS=${ARACHNE_USE_HEADLESS:-true}
      - SCRAPER_HEADLESS_IGNORE_CERT_ERRORS=${ARACHNE_HEADLESS_IGNORE_CERT_ERRORS:-false}
      - SCRAPER_HEADLESS_NO_SANDBOX=${ARACHNE_HEADLESS_NO_SANDBOX:-false}
      - SCRAPER_MAX_CONTENT_BYTES=${ARACHNE_MAX_CONTENT_BYTES:-300000}
      - SCRAPER_USER_AGENT=${ARACHNE_USER_AGENT:-Mozilla/5.0 (compatible; PortfolioBot/1.0)}
      - SCRAPER_RATE_LIMIT=${ARACHNE_RATE_LIMIT:-2}
      - SCRAPER_RATE_LIMIT_WINDOW=${ARACHNE_RATE_LIMIT_WINDOW:-1s}
      - SCRAPER_API_TOKEN=${ARACHNE_API_TOKEN:-}
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - portfolio-network

  # Redis - Required by Arachne for job storage
  redis:
    image: redis:7-alpine
    container_name: portfolio-redis
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory ${REDIS_MAX_MEMORY:-512mb} --maxmemory-policy ${REDIS_MAX_MEMORY_POLICY:-allkeys-lru}
    restart: unless-stopped
    networks:
      - portfolio-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Commander - Optional UI for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: portfolio-redis-commander
    environment:
      - REDIS_HOSTS=local:redis:${REDIS_PORT:-6379}
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - portfolio-network

networks:
  portfolio-network:
    driver: bridge

volumes:
  redis_data:
    driver: local
