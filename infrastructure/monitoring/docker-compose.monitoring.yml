# infrastructure/monitoring/docker-compose.monitoring.yml

services:
  prometheus:
    image: prom/prometheus:v2.37.0
    container_name: portfolio-prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    ports:
      - "9090:9090"
    networks:
      - portfolio-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:9090/-/healthy",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  grafana:
    image: grafana/grafana:9.2.0
    container_name: portfolio-grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/etc/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_SERVER_DOMAIN=${DOMAIN_NAME:-localhost}
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s/monitoring/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    ports:
      - "3000:3000"
    networks:
      - portfolio-network
    restart: unless-stopped
    depends_on:
      - prometheus
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3000/api/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  node-exporter:
    image: prom/node-exporter:v1.3.1
    container_name: portfolio-node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)"
      - "--collector.filesystem.ignored-fs-types=^(sys|proc|auto)fs$$"
    ports:
      - "9100:9100"
    networks:
      - portfolio-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:9100/metrics",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:0.10.0
    container_name: portfolio-nginx-exporter
    command:
      - -nginx.scrape-uri=http://127.0.0.1:80/stub_status
      - -nginx.ssl-verify=false
    ports:
      - "9113:9113"
    networks:
      - portfolio-network
    restart: unless-stopped
    depends_on:
      - nginx
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:9113/metrics",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis-exporter:
    image: oliver006/redis_exporter:v1.39.0
    platform: linux/amd64
    container_name: portfolio-redis-exporter
    command:
      - -redis.addr=redis://redis:6379
      - -redis.password=
    ports:
      - "9121:9121"
    networks:
      - portfolio-network
    restart: unless-stopped
    depends_on:
      - redis
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:9121/metrics",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  portfolio-network:
    driver: bridge

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
