name: CD - Deploy to Production

on:
  workflow_run:
    workflows: ["CI - Build Workfolio"]
    types:
      - completed

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' && (github.event.workflow_run.head_branch == 'main' || github.event.workflow_run.head_branch == 'master') }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PROD_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -p "${{ secrets.PROD_PORT }}" "${{ secrets.PROD_HOST }}" >> ~/.ssh/known_hosts

      - name: Set image tags env
        id: tags
        run: |
          echo "WORKFOLIO_IMAGE=ghcr.io/${{ github.repository }}/workfolio:${{ github.event.workflow_run.head_sha }}" >> $GITHUB_OUTPUT
          echo "AI_BACKEND_IMAGE=ghcr.io/${{ github.repository }}/ai-backend:${{ github.event.workflow_run.head_sha }}" >> $GITHUB_OUTPUT
          echo "ARACHNE_IMAGE=ghcr.io/${{ github.repository }}/arachne:${{ github.event.workflow_run.head_sha }}" >> $GITHUB_OUTPUT

      - name: SSH Deploy
        env:
          PROD_HOST: ${{ secrets.PROD_HOST }}
          PROD_USER: ${{ secrets.PROD_USER }}
          PROD_PORT: ${{ secrets.PROD_PORT }}
          WORKFOLIO_IMAGE: ${{ steps.tags.outputs.WORKFOLIO_IMAGE }}
          AI_BACKEND_IMAGE: ${{ steps.tags.outputs.AI_BACKEND_IMAGE }}
          ARACHNE_IMAGE: ${{ steps.tags.outputs.ARACHNE_IMAGE }}
          GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
        run: |
          ssh -p "$PROD_PORT" "$PROD_USER@$PROD_HOST" << EOF
          set -e
          cd "\$HOME/personal-website"
          export WORKFOLIO_IMAGE="${WORKFOLIO_IMAGE}"
          export AI_BACKEND_IMAGE="${AI_BACKEND_IMAGE}"
          export ARACHNE_IMAGE="${ARACHNE_IMAGE}"
          echo "Disk usage before cleanup:" && df -h /
          echo "Docker disk usage before cleanup:" && docker system df || true
          echo "Pruning unused Docker data to free space..."
          docker container prune -f || true
          docker image prune -af || true
          docker builder prune -af || true
          docker network prune -f || true
          docker volume prune -f || true
          # Truncate very large Docker container logs (requires root; ignore if not permitted)
          sudo find /var/lib/docker/containers -type f -name "*json.log" -size +100M -exec truncate -s 0 {} \; 2>/dev/null || true
          # Limit systemd journal size (requires root; ignore if not permitted)
          sudo journalctl --vacuum-size=100M 2>/dev/null || true
          # Remove old local docker config if present (to free a bit of space)
          rm -rf "\$HOME/.docker" 2>/dev/null || true
          # Use a temp docker config to avoid writing into a full home dir
          DOCKER_CONFIG_DIR="$(mktemp -d -t docker-config-XXXXXX 2>/dev/null || echo /tmp/docker-config)"
          mkdir -p "\$DOCKER_CONFIG_DIR" || true
          export DOCKER_CONFIG="\$DOCKER_CONFIG_DIR"
          echo "Logging in to GHCR using temporary DOCKER_CONFIG at \$DOCKER_CONFIG" 
          echo "${GHCR_TOKEN}" | docker login ghcr.io -u "${GHCR_USERNAME}" --password-stdin || true
          echo "Disk usage after cleanup:" && df -h /
          echo "Docker disk usage after cleanup:" && docker system df || true
          # Choose docker compose command
          if command -v docker-compose >/dev/null 2>&1; then
            COMPOSE_CMD="docker-compose"
          else
            COMPOSE_CMD="docker compose"
          fi
          # Ensure the production network exists with the expected name
          \$COMPOSE_CMD -f infrastructure/prod/docker-compose.prod.yml down || true
          docker network create portfolio-network-prod 2>/dev/null || true
          \$COMPOSE_CMD -f infrastructure/docker-compose.yml -f infrastructure/prod/docker-compose.prod.yml pull || true
          \$COMPOSE_CMD -f infrastructure/docker-compose.yml -f infrastructure/prod/docker-compose.prod.yml up -d
          \$COMPOSE_CMD -f infrastructure/docker-compose.yml -f infrastructure/prod/docker-compose.prod.yml ps
          EOF
